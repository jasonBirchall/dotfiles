autoload -Uz compinit promptinit
compinit
promptinit
setopt prompt_subst # dynamic command prompt
setopt COMPLETE_ALIASES
zstyle ':completion:*' menu select
zstyle ':completion::complete:*' gain-privileges 1 #For enabling autocompletion of privileged environments
setopt autocd		# Automatically cd into typed directory.
stty stop undef		# Disable ctrl-s to freeze terminal.

# This will set the default prompt to walters theme
# prompt walters

source <(kubectl completion zsh)
source ~/.config/zsh/.aliases

# Functions
function commands() {
  # Shorten the kubeconfig context
  long=$(cat $KUBECONFIG | grep "current-context:" | sed "s/current-context: //")
  short=$(print ${long} | awk -F. '{print $1}')

  kubectl config rename-context ${long} ${short}
}

commands &> /dev/null

## Git Settings
# https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Zsh
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
zstyle ':vcs_info:git:*' formats '%F{yellow}(%b)%r%f'
zstyle ':vcs_info:*' enable git

zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' unstagedstr '!'
zstyle ':vcs_info:*' stagedstr '+'
zstyle ':vcs_info:*' formats '%R/(%b)%S%u%c'

PROMPT='%F{blue}%1~%f %F{cyan}âˆ³%f '
RPROMPT=\$vcs_info_msg_0_
bindkey -e # emacs binding

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}" reverse-menu-complete

# History search
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^R" history-incremental-pattern-search-backward
HIST_STAMPS="dd.mm.yyyy"

[[ -n "${key[Up]}"   ]] && bindkey -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search

HISTFILE=~/.histfile
HISTSIZE='100000'
SAVEHIST="${HISTSIZE}"

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Shift, Alt, Ctrl and Meta modifiers
key[Control-Left]="${terminfo[kLFT5]}"
key[Control-Right]="${terminfo[kRIT5]}"

[[ -n "${key[Control-Left]}"  ]] && bindkey -- "${key[Control-Left]}"  backward-word
[[ -n "${key[Control-Right]}" ]] && bindkey -- "${key[Control-Right]}" forward-word


# Plugins
source $HOME/Documents/workarea/dotfiles/zsh/packages/zsh-autosuggestions/zsh-autosuggestions.zsh
source $HOME/Documents/workarea/dotfiles/zsh/antigen.zsh

## Use the oh-my-zsh library
antigen use oh-my-zsh

antigen bundle git
antigen bundle git-extras
antigen bundle tmux
antigen bundle zsh-users/zsh-completions
antigen bundle command-not-found
antigen bundle agkozak/zsh-z
# antigen bundle ohmyzsh/plugins/fzf # look at this one in further detail

# Syntax highlighting bundle. Has to be the last package.
antigen bundle zsh-users/zsh-syntax-highlighting

# Load the theme.
# You probably will want to install powerline fonts https://github.com/powerline/fonts
antigen theme denysdovhan/spaceship-prompt

# Prompt configuration:
# https://github.com/denysdovhan/spaceship-prompt/blob/master/docs/Options.md#prompt
SPACESHIP_TIME_SHOW=true
# SPACESHIP_USER_SHOW=always
SPACESHIP_USER_PREFIX="| "
SPACESHIP_USER_COLOR=gold
SPACESHIP_DIR_PREFIX="| "
SPACESHIP_DIR_COLOR=blue
SPACESHIP_GIT_PREFIX="| "
SPACESHIP_GIT_STATUS_COLOR=green
SPACESHIP_GIT_BRANCH_COLOR=white
SPACESHIP_KUBECTL_SHOW=true
SPACESHIP_KUBECTL_VERSION_SHOW=false
SPACESHIP_KUBECTL_PREFIX="| "
SPACESHIP_KUBECTL_SYMBOL=""
SPACESHIP_KUBECONTEXT_SHOW=true
SPACESHIP_KUBECONTEXT_COLOR=green
SPACESHIP_KUBECONTEXT_COLOR_GROUPS=(
  # Red if the context contains live
  red    live
)

SPACESHIP_PROMPT_ORDER=(
  time
  user
  dir
  # aws
  terraform
  kubectl
  vi_mode
  git
  exec_time
  line_sep
  char
)

# Empty by default 
# SPACESHIP_RPROMPT_ORDER=(
# )

# Tell antigen that you're done
antigen apply

